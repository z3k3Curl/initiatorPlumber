dimport java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

class ElectricityBillCalculator implements Runnable {
    private int units;
    private double billToPay;

    public ElectricityBillCalculator(int units) {
        this.units = units;
    }

    public double getBillToPay() {
        return billToPay;
    }

    @Override
    public void run() {
        synchronized (this) {
            // Check the number of units and calculate the bill
            if (units < 201) {
                billToPay = units * 0.218;
            } else if (units < 301) {
                billToPay = 200 * 0.218 + (units - 200) * 0.334;
            } else if (units < 601) {
                billToPay = 200 * 0.218 + 100 * 0.334 + (units - 300) * 0.516;
            } else if (units >= 601) {
                billToPay = 200 * 0.218 + 300 * 0.334 + 100 * 0.516 + (units - 600) * 0.546;
            }
        }
    }
}

class HouseNumberInput implements Runnable {
    private int houseNumber;

    public int getHouseNumber() {
        return houseNumber;
    }

    @Override
    public void run() {
        synchronized (this) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the house number: ");
            houseNumber = scanner.nextInt();
        }
    }
}

class CurrentDateTimeFetcher implements Runnable {
    private LocalDateTime currentDateTime;

    public LocalDateTime getCurrentDateTime() {
        return currentDateTime;
    }

    @Override
    public void run() {
        synchronized (this) {
            currentDateTime = LocalDateTime.now();
        }
    }
}

class ProgramLoopInput implements Runnable {
    private boolean shouldLoop;

    public boolean shouldLoop() {
        return shouldLoop;
    }

    @Override
    public void run() {
        synchronized (this) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Do you want to loop the program? (Y/N): ");
            String input = scanner.nextLine();
            shouldLoop = input.equalsIgnoreCase("Y");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        do {
            HouseNumberInput houseNumberInput = new HouseNumberInput();
            Thread houseNumberThread = new Thread(houseNumberInput);
            houseNumberThread.start();

            try {
                houseNumberThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int houseNumber = houseNumberInput.getHouseNumber();

            System.out.print("Enter the number of units consumed: ");
            Scanner scanner = new Scanner(System.in);
            int units = scanner.nextInt();

            ElectricityBillCalculator calculator = new ElectricityBillCalculator(units);
            Thread billThread = new Thread(calculator);
            billThread.start();

            try {
                billThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            double billAmount = calculator.getBillToPay();
            System.out.println("House number: " + houseNumber);
            System.out.println("Electricity bill to pay: $" + billAmount);

            CurrentDateTimeFetcher dateTimeFetcher = new CurrentDateTimeFetcher();
            Thread dateTimeThread = new Thread(dateTimeFetcher);
            dateTimeThread.start();

            try {
                dateTimeThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            LocalDateTime currentDateTime = dateTimeFetcher.getCurrentDateTime();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = currentDateTime.format(formatter);
            System.out.println("Current Date and Time: " + formattedDateTime);

            ProgramLoopInput loopInput = new ProgramLoopInput();
            Thread loopThread = new Thread(loopInput);
            loopThread.start();

            try {
                loopThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!loopInput.shouldLoop()) {
                break;
            }
        } while (true);
    }
}
